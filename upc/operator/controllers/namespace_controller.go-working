package controllers

import (
	"context"
	"fmt"
	"reflect"
	"strings"
	"sync"

	log "github.com/sirupsen/logrus"
	v1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// NamespaceReconciler reconciles a Namespace object
type NamespaceReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

var projectNamespaces = make(map[string]map[string]struct{})

var mutex = &sync.Mutex{} // used to safely control access to projectNamespaces

func prettyPrintProjectNamespaces() string {
	mutex.Lock()
	defer mutex.Unlock()

	var builder strings.Builder
	for projectId, namespaces := range projectNamespaces {
		builder.WriteString(fmt.Sprintf("projectId: %s\n", projectId))
		for namespace := range namespaces {
			builder.WriteString(fmt.Sprintf("  namespace: %s\n", namespace))
		}
	}
	return builder.String()
}

func (r *NamespaceReconciler) ensureKubeStateMetricsDeployment(ctx context.Context, projectId string, namespaces []string) error {
	image := "rancher/mirrored-kube-state-metrics-kube-state-metrics:v2.6.0"
	deploymentName := "dyn-metrics-for-" + projectId
	namespaceList := strings.Join(namespaces, ",")
	command := []string{
		"/kube-state-metrics",
		"--namespaces=" + namespaceList,
		"--port=8080",
		"--resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments",
	}

	deployment := &v1.Deployment{}
	err := r.Get(ctx, client.ObjectKey{Namespace: "cattle-monitoring-system", Name: deploymentName}, deployment)

	// Define the desired state of the Deployment
	desiredDeployment := newKubeStateMetricsDeployment(deploymentName, command, image)

	switch {
	case err == nil:
		// Deployment exists. Update it if its spec has changed.
		if !reflect.DeepEqual(deployment.Spec, desiredDeployment.Spec) {
			deployment.Spec = desiredDeployment.Spec
			if err := r.Update(ctx, deployment); err != nil {
				log.Error(err, "Failed to update kube-state-metrics Deployment", "Deployment.Namespace", deployment.Namespace, "Deployment.Name", deployment.Name)
				return err
			}
			log.Info("Updated kube-state-metrics Deployment", "Deployment.Namespace", deployment.Namespace, "Deployment.Name", deployment.Name)
		}
	case errors.IsNotFound(err):
		// Deployment does not exist. Create a new one.
		deployment = desiredDeployment
		if err := r.Create(ctx, deployment); err != nil {
			log.Error(err, "Failed to create kube-state-metrics Deployment", "Deployment.Namespace", deployment.Namespace, "Deployment.Name", deployment.Name)
			return err
		}
		log.Info("Created kube-state-metrics Deployment", "Deployment.Namespace", deployment.Namespace, "Deployment.Name", deployment.Name)
	default:
		// Unexpected error.
		log.Error(err, "Failed to get kube-state-metrics Deployment", "Deployment.Namespace", "cattle-monitoring-system", "Deployment.Name", deploymentName)
		return err
	}

	return nil
}

func newKubeStateMetricsDeployment(deploymentName string, command []string, image string) *v1.Deployment {
	return &v1.Deployment{
		ObjectMeta: metav1.ObjectMeta{
			Name:      deploymentName,
			Namespace: "cattle-monitoring-system", // replace with the namespace where you want to create the Deployment
		},
		Spec: v1.DeploymentSpec{
			Replicas: int32Ptr(1), // replace with the number of replicas you need
			Selector: &metav1.LabelSelector{
				MatchLabels: map[string]string{"app": deploymentName},
			},
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: map[string]string{"app": deploymentName},
				},
				Spec: corev1.PodSpec{
					ServiceAccountName: "rancher-monitoring-kube-state-metrics",
					Containers: []corev1.Container{
						{
							Name:    "kube-state-metrics",
							Image:   image, // replace with the version you need
							Command: command,
						},
					},
				},
			},
		},
	}
}

func (r *NamespaceReconciler) ensureKubeStateMetricsService(ctx context.Context, serviceName string, projectId string) error {
	service := &corev1.Service{}
	err := r.Get(ctx, client.ObjectKey{Namespace: "cattle-monitoring-system", Name: serviceName}, service)

	// Define the desired state of the Service
	desiredService := newKubeStateMetricsService(serviceName, projectId)

	switch {
	case err == nil:
		// Service exists. Update it if its spec has changed.
		if !reflect.DeepEqual(service.Spec, desiredService.Spec) || !reflect.DeepEqual(service.Labels, desiredService.Labels) {
			service.Spec = desiredService.Spec
			service.Labels = desiredService.Labels
			if err := r.Update(ctx, service); err != nil {
				log.Error(err, "Failed to update Service", "Service.Namespace", service.Namespace, "Service.Name", service.Name)
				return err
			}
			log.Info("Updated Service", "Service.Namespace", service.Namespace, "Service.Name", service.Name)
		}
	case errors.IsNotFound(err):
		// Service does not exist. Create a new one.
		service = desiredService
		if err := r.Create(ctx, service); err != nil {
			log.Error(err, "Failed to create Service", "Service.Namespace", service.Namespace, "Service.Name", service.Name)
			return err
		}
		log.Info("Created Service", "Service.Namespace", service.Namespace, "Service.Name", service.Name)
	default:
		// Unexpected error.
		log.Error(err, "Failed to get Service", "Service.Namespace", "cattle-monitoring-system", "Service.Name", serviceName)
		return err
	}

	return nil
}

func newKubeStateMetricsService(deploymentName string, projectId string) *corev1.Service {
	return &corev1.Service{
		ObjectMeta: metav1.ObjectMeta{
			Name:      deploymentName,
			Namespace: "cattle-monitoring-system", // replace with the namespace where you want to create the Service
			Labels: map[string]string{
				"app.kubernetes.io/component":  "metrics",
				"app.kubernetes.io/managed-by": "Helm",
				"app.kubernetes.io/instance":   "upc-monitoring",
				"app.kubernetes.io/name":       "dyn-metrics",
				"app.kubernetes.io/part-of":    "dyn-metrics",
				"app.kubernetes.io/version":    "1.0.0",
				"app.upcnet/project_id":        projectId,
			},
			Annotations: map[string]string{
				"prometheus.io/scrape": "true",
			},
		},
		Spec: corev1.ServiceSpec{
			Selector: map[string]string{
				"app": deploymentName,
			},
			Ports: []corev1.ServicePort{
				{
					Name:     "http",
					Protocol: corev1.ProtocolTCP,
					Port:     8080,
					TargetPort: intstr.IntOrString{
						Type:   intstr.Int,
						IntVal: 8080,
					},
				},
			},
		},
	}
}

func int32Ptr(i int32) *int32 { return &i }

func (r *NamespaceReconciler) deleteKubeStateMetricsDeployment(ctx context.Context, projectId string) error {
	deploymentName := fmt.Sprintf("dyn-metrics-for-%s", projectId)

	// Delete the Deployment
	deployment := &v1.Deployment{
		ObjectMeta: metav1.ObjectMeta{
			Name:      deploymentName,
			Namespace: "cattle-monitoring-system",
		},
	}
	if err := r.Delete(ctx, deployment); client.IgnoreNotFound(err) != nil {
		log.Error(err, "Failed to delete Deployment", "Deployment", deploymentName)
		return err
	}

	// Delete the Service
	service := &corev1.Service{
		ObjectMeta: metav1.ObjectMeta{
			Name:      deploymentName,
			Namespace: "cattle-monitoring-system",
		},
	}
	if err := r.Delete(ctx, service); client.IgnoreNotFound(err) != nil {
		log.Error(err, "Failed to delete Service", "Service", deploymentName)
		return err
	}

	return nil
}

func getNamespaceListFromMap(namespaces map[string]struct{}) []string {
	namespaceList := make([]string, 0, len(namespaces))
	for namespace := range namespaces {
		namespaceList = append(namespaceList, namespace)
	}
	return namespaceList
}

// Reconcile compares the state specified by the Namespace object against the actual cluster state
// and performs operations to make the cluster state reflect the state specified by the user.
func (r *NamespaceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	// Fetch the namespace instance
	namespace := &corev1.Namespace{}
	err := r.Get(ctx, req.NamespacedName, namespace)
	if err != nil {
		if errors.IsNotFound(err) {
			// This means the namespace was deleted.
			// Need to iterate over projectNamespaces map and remove the namespace from all projects if present.
			for projectId, namespaces := range projectNamespaces {
				if _, exists := namespaces[req.NamespacedName.Name]; exists {
					delete(namespaces, req.NamespacedName.Name)
					log.Infof("Namespace deleted: %s. Removed from projectId: %s", req.NamespacedName, projectId)

					// If the project still has any namespaces, update its kube-state-metrics Deployment
					// Otherwise, delete its kube-state-metrics Deployment
					if len(namespaces) > 0 {
						namespaceList := getNamespaceListFromMap(namespaces)
						if err := r.ensureKubeStateMetricsDeployment(ctx, projectId, namespaceList); err != nil {
							log.Error(err, "Failed to update kube-state-metrics Deployment for projectId", "projectId", projectId)
							return ctrl.Result{}, err
						}
						// Also ensure service is updated
						deploymentName := "kube-state-metrics-for-" + projectId
						if err := r.ensureKubeStateMetricsService(ctx, deploymentName, projectId); err != nil {
							log.Error(err, "Failed to ensure kube-state-metrics Service for Deployment", "Deployment", deploymentName)
							return ctrl.Result{}, err
						}
					} else {
						if err := r.deleteKubeStateMetricsDeployment(ctx, projectId); err != nil {
							log.Error(err, "Failed to delete kube-state-metrics Deploymentfor projectId", "projectId", projectId)
							return ctrl.Result{}, err
						}
					}

					// Remove the project from the projectNamespaces map
					delete(projectNamespaces, projectId)
					log.Infof("Removed projectId %s from projects as it no longer has any namespaces", projectId)
				}
			}
			log.Info("Current set of namespaces: \n" + prettyPrintProjectNamespaces())
			return ctrl.Result{}, nil
		}

		log.Error(err, "Unable to fetch Namespace")
		return ctrl.Result{}, err
	}

	// This means the namespace was created or updated.
	// Add the namespace to the set of the corresponding projectId.
	if projectId, ok := namespace.Labels["field.cattle.io/projectId"]; ok {
		// If this projectId is seen for the first time, initialize a new map for it.
		if _, exists := projectNamespaces[projectId]; !exists {
			projectNamespaces[projectId] = make(map[string]struct{})
		}
		projectNamespaces[projectId][namespace.Name] = struct{}{}
		log.Infof("Namespace added/updated: %s. Added to projectId: %s", namespace.Name, projectId)

		// Ensure the kube-state-metrics Deployment exists for this projectId
		namespaces := make([]string, len(projectNamespaces[projectId]))
		i := 0
		for namespaceName := range projectNamespaces[projectId] {
			namespaces[i] = namespaceName
			i++
		}
		if err := r.ensureKubeStateMetricsDeployment(ctx, projectId, namespaces); err != nil {
			log.Error(err, "Failed to ensure kube-state-metrics Deployment for projectId", "projectId", projectId)
			return ctrl.Result{}, err
		}

		// Ensure the kube-state-metrics Service exists for this Deployment
		deploymentName := "dyn-metrics-for-" + projectId
		if err := r.ensureKubeStateMetricsService(ctx, deploymentName, projectId); err != nil {
			log.Error(err, "Failed to ensure kube-state-metrics Service for Deployment", "Deployment", deploymentName)
			return ctrl.Result{}, err
		}
	} else {
		log.Errorf("Failed to find label 'field.cattle.io/projectId' for namespace: %s", namespace.Name)
	}

	log.Info("Current set of namespaces: \n" + prettyPrintProjectNamespaces())

	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *NamespaceReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&corev1.Namespace{}).
		Complete(r)
}

/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"fmt"
	"reflect"
	"strings"

	log "github.com/sirupsen/logrus"
	v1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	//"sigs.k8s.io/controller-runtime/pkg/log"
)

// NamespaceReconciler reconciles a Namespace object
type NamespaceReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

var projectNamespaces = make(map[string]map[string]struct{})

func prettyPrintProjectNamespaces() string {
	var builder strings.Builder
	for projectId, namespaces := range projectNamespaces {
		builder.WriteString(fmt.Sprintf("projectId: %s\n", projectId))
		for namespace := range namespaces {
			builder.WriteString(fmt.Sprintf("  namespace: %s\n", namespace))
		}
	}
	return builder.String()
}

// +kubebuilder:rbac:groups=core,resources=namespaces,verbs=get;list;watch;create;update;patch;delete
func (r *NamespaceReconciler) ensureKubeStateMetricsDeployment(ctx context.Context, projectId string, namespaces []string) error {
	image := "rancher/mirrored-kube-state-metrics-kube-state-metrics:v2.6.0"
	deploymentName := "kube-state-metrics-for-" + projectId
	namespaceList := strings.Join(namespaces, ",")
	command := []string{
		"/kube-state-metrics",
		"--namespaces=" + namespaceList,
		// add other command line arguments as needed
	}

	deployment := &v1.Deployment{}
	err := r.Get(ctx, client.ObjectKey{Namespace: "default", Name: deploymentName}, deployment)

	switch {
	case err == nil:
		// Deployment exists. Update it if command has changed.
		if !reflect.DeepEqual(deployment.Spec.Template.Spec.Containers[0].Command, command) {
			deployment.Spec.Template.Spec.Containers[0].Command = command
			if err := r.Update(ctx, deployment); err != nil {
				log.Error(err, "Failed to update kube-state-metrics Deployment", "Deployment.Namespace", deployment.Namespace, "Deployment.Name", deployment.Name)
				return err
			}
			log.Info("Updated kube-state-metrics Deployment", "Deployment.Namespace", deployment.Namespace, "Deployment.Name", deployment.Name)
		}
	case errors.IsNotFound(err):
		// Deployment does not exist. Create a new one.
		deployment = newKubeStateMetricsDeployment(deploymentName, command, image)
		if err := r.Create(ctx, deployment); err != nil {
			log.Error(err, "Failed to create kube-state-metrics Deployment", "Deployment.Namespace", deployment.Namespace, "Deployment.Name", deployment.Name)
			return err
		}
		log.Info("Created kube-state-metrics Deployment", "Deployment.Namespace", deployment.Namespace, "Deployment.Name", deployment.Name)
	default:
		// Unexpected error.
		log.Error(err, "Failed to get kube-state-metrics Deployment", "Deployment.Namespace", "default", "Deployment.Name", deploymentName)
		return err
	}

	return nil
}
func newKubeStateMetricsDeployment(deploymentName string, command []string, image string) *v1.Deployment {
	return &v1.Deployment{
		ObjectMeta: metav1.ObjectMeta{
			Name:      deploymentName,
			Namespace: "default", // replace with the namespace where you want to create the Deployment
		},
		Spec: v1.DeploymentSpec{
			Replicas: int32Ptr(1), // replace with the number of replicas you need
			Selector: &metav1.LabelSelector{
				MatchLabels: map[string]string{"app": deploymentName},
			},
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: map[string]string{"app": deploymentName},
				},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:    "kube-state-metrics",
							Image:   image, // replace with the version you need
							Command: command,
						},
					},
				},
			},
		},
	}
}

func int32Ptr(i int32) *int32 { return &i }

func (r *NamespaceReconciler) deleteKubeStateMetricsDeployment(ctx context.Context, projectId string) error {
	deploymentName := fmt.Sprintf("kube-state-metrics-for-%s", projectId)

	deployment := &v1.Deployment{
		ObjectMeta: metav1.ObjectMeta{
			Name:      deploymentName,
			Namespace: "default", // replace with the correct namespace
		},
	}

	if err := r.Delete(ctx, deployment); client.IgnoreNotFound(err) != nil {
		log.Error(err, "Failed to delete Deployment", "Deployment", deploymentName)
		return err
	}

	return nil
}

func getNamespaceListFromMap(namespaces map[string]struct{}) []string {
	namespaceList := make([]string, 0, len(namespaces))
	for namespace := range namespaces {
		namespaceList = append(namespaceList, namespace)
	}
	return namespaceList
}

//+kubebuilder:rbac:groups=core,resources=namespaces/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=core,resources=namespaces/finalizers,verbs=update

// TODO(user): Modify the Reconcile function to compare the state specified by
// the Namespace object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.14.1/pkg/reconcile
func (r *NamespaceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	// Fetch the namespace instance
	namespace := &corev1.Namespace{}
	err := r.Get(ctx, req.NamespacedName, namespace)
	if err != nil {
		if errors.IsNotFound(err) {
			// This means the namespace was deleted.
			// Need to iterate over projectNamespaces map and remove the namespace from all projects if present.
			for projectId, namespaces := range projectNamespaces {
				if _, exists := namespaces[req.NamespacedName.Name]; exists {
					delete(namespaces, req.NamespacedName.Name)
					log.Infof("Namespace deleted: %s. Removed from projectId: %s", req.NamespacedName, projectId)

					// If the project still has any namespaces, update its kube-state-metrics Deployment
					// Otherwise, delete its kube-state-metrics Deployment
					if len(namespaces) > 0 {
						namespaceList := getNamespaceListFromMap(namespaces)
						if err := r.ensureKubeStateMetricsDeployment(ctx, projectId, namespaceList); err != nil {
							log.Error(err, "Failed to update kube-state-metrics Deployment for projectId", "projectId", projectId)
							return ctrl.Result{}, err
						}
					} else {
						if err := r.deleteKubeStateMetricsDeployment(ctx, projectId); err != nil {
							log.Error(err, "Failed to delete kube-state-metrics Deployment for projectId", "projectId", projectId)
							return ctrl.Result{}, err
						}

						// Remove the project from the projectNamespaces map
						delete(projectNamespaces, projectId)
						log.Infof("Removed projectId %s from projects as it no longer has any namespaces", projectId)
					}
				}
			}
			log.Info("Current set of namespaces: \n" + prettyPrintProjectNamespaces())
			return ctrl.Result{}, nil
		}
		log.Error(err, "Unable to fetch Namespace")
		return ctrl.Result{}, err
	}

	// This means the namespace was created or updated.
	// Add the namespace to the set of the corresponding projectId.
	if projectId, ok := namespace.Labels["field.cattle.io/projectId"]; ok {
		// If this projectId is seen for the first time, initialize a new map for it.
		if _, exists := projectNamespaces[projectId]; !exists {
			projectNamespaces[projectId] = make(map[string]struct{})
		}
		projectNamespaces[projectId][namespace.Name] = struct{}{}
		log.Infof("Namespace added/updated: %s. Added to projectId: %s", namespace.Name, projectId)

		// Ensure the kube-state-metrics Deployment exists for this projectId
		namespaces := make([]string, len(projectNamespaces[projectId]))
		i := 0
		for namespaceName := range projectNamespaces[projectId] {
			namespaces[i] = namespaceName
			i++
		}
		if err := r.ensureKubeStateMetricsDeployment(ctx, projectId, namespaces); err != nil {
			log.Error(err, "Failed to ensure kube-state-metrics Deployment for projectId", "projectId", projectId)
			return ctrl.Result{}, err
		}
	} else {
		log.Errorf("Failed to find label 'field.cattle.io/projectId' for namespace: %s", namespace.Name)
	}

	log.Info("Current set of namespaces: \n" + prettyPrintProjectNamespaces())

	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *NamespaceReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&corev1.Namespace{}).
		Complete(r)
}
